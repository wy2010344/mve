{
	(
		(load (lib-path 'g_Lib/g_common.lisp))
		[
			k js
			in-type lib
			better-type user
			build-cls
				{
					`
			            key
			            run
			            other 可选
			            toString
			            type
					`
					(let (p) args)
					[
						"
		function "(quote p.key)"(){}
		"(quote p.key)".prototype=new Fun();
		"(quote p.other)";
		mb.Object.ember("(quote p.key)".prototype,{
			toString:function(){
				return \""(p.toString)"\";
			},
			exec:function(args){
                "(quote p.run)"
			},
			ftype:function(){
				return this.Function_type."(quote p.type)";
			}
		});
						"
					]
				}
			build-m
				{
					(let (k key) args)
					[
						"
		m=lib.s.kvs_extend(\""(quote k)"\",new "(quote key)"(),m);
						"
					]
				}
			write-result
				{
					(let (cls fun) args)
					(write
						(pathOf './System.js)
						(str-join
							[
								"
({
	data:{
		s:\"./s.js\"
	},
	success:function(p){
		var Fun=p.Fun;
		"
			(load (lib-path 'g_Lib/g_js_common.lisp))
			(str-join cls)
		"
		var m=null;
		m=lib.s.kvs_extend(\"true\",true,m);
		m=lib.s.kvs_extend(\"false\",false,m);
		"
			(str-join fun)
		"
		return m;
	}
});
								"
							]
						)
					)
				}
		]
	)
}