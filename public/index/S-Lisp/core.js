{
  "index/S-Lisp/index/a.lisp": "{\r\n\t(log '我是A文件)\r\n\r\n\t(let x (load './b.lisp))\r\n\t(if-run (> 9 8)\r\n\t\t\t{\r\n\t\t\t\t(log '小于98)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t(log '大于98)\r\n\t\t\t}\r\n\t)\r\n\t(x)\r\n\t[\r\n\t\ta 98 b {\r\n\t\t\t(log 'as文件返回)\r\n\t\t}\r\n\t]\r\n}",
  "index/S-Lisp/index/b.lisp": "(log '我是B文件)\r\n(log (reduce [a b c]\r\n\t{\r\n\t\t(let (init v i) args)\r\n\t\t(extend v init)\r\n\t}\r\n\t[]\r\n))\r\n{\r\n\t(log 'b文件返回)\r\n}",
  "index/S-Lisp/index/ca.lisp": "{\r\n\t(let (a b c ) args)\r\n\t(mve\r\n\t\t{\r\n\t\t\t(let (me) args)\r\n\t\t\t(let ak (me 'Value 98))\r\n\t\t\t[\r\n\t\t\t\tinit {\r\n\t\t\t\t\t(log '我是子组件初始化)\r\n\t\t\t\t}\r\n\t\t\t\tdestroy {\r\n\t\t\t\t\t(log '我是子组件销毁)\r\n\t\t\t\t}\r\n\t\t\t\telement {\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\ttype div\r\n\t\t\t\t\t\tattr [\r\n\t\t\t\t\t\t\ta 0 b 1\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\tchildren [\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\ttype button\r\n\t\t\t\t\t\t\t\taction [\r\n\t\t\t\t\t\t\t\t\tclick {\r\n\t\t\t\t\t\t\t\t\t\t(ak (+ (ak) 1 ))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\ttext (str-join [我是组件 (ak)])\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t)\r\n}",
  "index/S-Lisp/index/index.lisp": "{\r\n\t(let x {\r\n\t\t(log 9)\r\n\t})\r\n\t(quote 88)\r\n\t(log 988 7)\t\r\n\t(let a (load './a.lisp) b (load './b.lisp))\r\n\t(let x (kvs-match (a)))\r\n\t( (x 'b) )\r\n\t{\r\n\t\t(log 98 7)\t\r\n\t}\r\n\t(mve\r\n\t\t{\r\n\t\t\t(let (me) args)\r\n\t\t\t(let a (me 'Value 9))\r\n\t\t\t(log (a))\r\n\t\t\t(a (+ (a) 1))\r\n\t\t\t(log (a))\r\n\t\t\t(let array (me 'Value [a b c d e f g h]))\r\n\t\t\t[\r\n\t\t\t\telement [\r\n\t\t\t\t\ttype div\r\n\t\t\t\t\taction [\r\n\t\t\t\t\t\tclick {\r\n\t\t\t\t\t\t\t(log 98)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t\tattr [\r\n\t\t\t\t\t\ta 98 \r\n\t\t\t\t\t\tb 89\r\n\t\t\t\t\t]\r\n\t\t\t\t\tchildren [\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype div\r\n\t\t\t\t\t\t\tattr [\r\n\t\t\t\t\t\t\t\tcolor red\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\ttext 你\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype div\r\n\t\t\t\t\t\t\tstyle [\r\n\t\t\t\t\t\t\t\tcolor red\r\n\t\t\t\t\t\t\t\tbackground-color gray\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\ttext 我\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype button\r\n\t\t\t\t\t\t\ttext {\r\n\t\t\t\t\t\t\t\t(a)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\taction [\r\n\t\t\t\t\t\t\t\tclick {\r\n\t\t\t\t\t\t\t\t\t(a (+ (a) 1))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype button\r\n\t\t\t\t\t\t\ttext {\r\n\t\t\t\t\t\t\t\t(+ (a) 1)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\taction [\r\n\t\t\t\t\t\t\t\tclick {\r\n\t\t\t\t\t\t\t\t\t(a (+ (a) 2))\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\ttype div\r\n\t\t\t\t\t\t\t\ttext (str-join [来吧 (a)])\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype ul\r\n\t\t\t\t\t\t\tchildren [\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\ttype li\r\n\t\t\t\t\t\t\t\t\ttext 试用S-Lisp\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\ttype li\r\n\t\t\t\t\t\t\t\t\ttext 试用mve\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype input\r\n\t\t\t\t\t\t\tvalue 'a\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype (load './ca.lisp)\r\n\t\t\t\t\t\t\tparams [\r\n\t\t\t\t\t\t\t\tx y z\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\"感谢支持\"\r\n\r\n\t\t\t\t\t\t'测试children-repeat\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype div\r\n\t\t\t\t\t\t\tchildren [\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\ttype input\r\n\t\t\t\t\t\t\t\t\tid ipx\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\ttype button\r\n\t\t\t\t\t\t\t\t\ttext {\r\n\t\t\t\t\t\t\t\t\t\t(str-join [(len (array)) 条记录])\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\taction [\r\n\t\t\t\t\t\t\t\t\t\tclick {\r\n\t\t\t\t\t\t\t\t\t\t\t(let el (me 'k 'ipx))\r\n\t\t\t\t\t\t\t\t\t\t\t(let v (js-attr el 'value))\r\n\t\t\t\t\t\t\t\t\t\t\t(if-run (= 0 (str-length (str-trim v)))\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(js-call 'window 'alert [无内容])\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(array (extend v (array)))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(js-attr el 'value \"\")\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\ttype ul\r\n\t\t\t\t\t\t\tchildren {\r\n\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\tarray 'array\r\n\t\t\t\t\t\t\t\t\trepeat {\r\n\t\t\t\t\t\t\t\t\t\t(let o (kvs-match (first args)))\r\n\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t\t\ttype li\r\n\t\t\t\t\t\t\t\t\t\t\tchildren [\r\n\t\t\t\t\t\t\t\t\t\t\t\t[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype button text x \r\n\t\t\t\t\t\t\t\t\t\t\t\t\taction [\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclick {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(log ((o 'index)))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(array (splice (array) ((o 'index)) 1))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t((o 'index))\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t------\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t((o 'data))\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t]\r\n\t\t\t\t]\r\n\t\t\t]\r\n\t\t}\r\n\t)\r\n}",
  "index/S-Lisp/util/index.lisp": "\r\n\r\n\r\n`致力于变成多平台通用的文件`\r\n(let \r\n\t!= {\r\n\t\t(not (apply = args))\r\n\t}\r\n\tempty-fun {}\r\n\tdefault {\r\n\t\t(let (a dv) args)\r\n\t\t(if (exist? a) a dv)\r\n\t}\r\n\tif-run {\r\n\t\t(let (a b c) args)\r\n\t\t(let c  (default c empty-fun))\r\n\t\t(let run (if a b c))\r\n\t\t(run)\r\n\t}\r\n\t`偏移量，从0开始，最大为list的length`\r\n\toffset {\r\n\t\t(let (list i) args offset this)\r\n\t\t(if-run (= i 0) \r\n\t\t\t{ list }\r\n\t\t\t{\r\n\t\t\t\t(offset (rest list) (- i 1)) \r\n\t\t\t} \r\n\t\t)\r\n\t}\r\n\r\n\t`其实str-join有点reduce的意思，但分割符末尾没有，至于下标序号，在init参数中`\r\n\treduce {\r\n\t\t(let (xs run init) args reduce this)\r\n\t\t(if-run (exist? xs)\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) xs)\r\n\t\t\t\t(let init (run init x))\r\n\t\t\t\t(reduce xs run init)\r\n\t\t\t}\r\n\t\t\t{init}\r\n\t\t)\r\n\t}\r\n\t\r\n\t`异步的reduce`\r\n\tasync-reduce {\r\n\t\t(let (notice xs run init) args async-reduce this)\r\n\t\t(if-run (exist? xs)\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) xs)\r\n\t\t\t\t(run \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t`单个的notice`\r\n\t\t\t\t\t\t(let (init) args)\r\n\t\t\t\t\t\t(async-reduce notice xs run init)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinit x\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t(notice init)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\treduce-right {\r\n\t\t(let (xs run init) args reduce-right this)\r\n\t\t(if-run (exist? xs)\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) xs)\r\n\t\t\t\t(run \r\n\t\t\t\t\t(reduce-right xs run  init)\r\n\t\t\t\t\tx\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{ init }\r\n\t\t)\r\n\t}\r\n\t\r\n\tkvs-reduce {\r\n\t\t(let (kvs run init) args kvs-reduce this)\r\n\t\t(if-run (exist? kvs)\r\n\t\t\t{\r\n\t\t\t\t(let (k v ...kvs) kvs)\r\n\t\t\t\t(let init (run init v k))\r\n\t\t\t\t(kvs-reduce kvs run init)\r\n\t\t\t}\r\n\t\t\t{init}\r\n\t\t)\r\n\t}\r\n\r\n\tasync-kvs-reduce {\r\n\t\t(let (notice kvs run init) args async-kvs-reduce this)\r\n\t\t(if-run (exist? kvs)\r\n\t\t\t{\r\n\t\t\t\t(let (k v ...kvs) kvs)\r\n\t\t\t\t(run \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t`单个的notice`\r\n\t\t\t\t\t\t(let (init) args)\r\n\t\t\t\t\t\t(async-kvs-reduce notice kvs run init)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinit v k\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t(notice init)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\t\r\n\tkvs-reduce-right {\r\n\t\t(let (kvs run init) args kvs-reduce-right this)\r\n\t\t(if-run (exist? kvs)\r\n\t\t\t{\r\n\t\t\t\t(let (k v ...kvs) kvs)\r\n\t\t\t\t(run\r\n\t\t\t\t\t(kvs-reduce-right kvs run init)\r\n\t\t\t\t\tv\r\n\t\t\t\t\tk\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{ init }\r\n\t\t)\r\n\t}\r\n\t`切片到某处`\r\n\tslice-to {\r\n\t\t(let (xs to) args slice-to this)\r\n\t\t(if-run (= to 0)\r\n\t\t\t{[]}\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) xs)\r\n\t\t\t\t(extend x (slice-to xs (- to 1)))\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\t`从某处开始切片`\r\n\tslice-from offset\r\n\t`叠加两个，可以用reduce来做N次重复`\r\n\tcombine-two {\r\n\t\t(let (adds olds) args combine-two this)\r\n\t\t(if-run (exist? adds)\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) adds)\r\n\t\t\t\t(if-run (exist? xs)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(extend x (combine-two xs olds))\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(extend x olds)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tolds\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\tkvs-path {\r\n\t\t(let (e paths) args kvs-path this)\r\n\t\t(if-run (exist? paths)\r\n\t\t\t{\r\n\t\t\t\t(let (path ...paths) paths)\r\n\t\t\t\t(kvs-path \r\n\t\t\t\t\t(kvs-find1st e path)\r\n\t\t\t\t\tpaths\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{e}\r\n\t\t)\r\n\t}\r\n\t\r\n\treverse-join {\r\n\t\t(reduce args\r\n\t\t\t{\r\n\t\t\t\t(let (init xs i) args)\r\n\t\t\t\t(reduce xs\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let (init x i) args)\r\n\t\t\t\t\t\t(extend x init)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tinit\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t[]\r\n\t\t)\r\n\t}\r\n)\r\n\r\n[\r\n\t!= '!=\r\n\tempty-fun 'empty-fun\r\n\t`不想使用*的kvs-match，可以用这个kvs-match`\r\n\tkvs-match {\r\n\t\t(let (kvs) args)\r\n\t\t{\r\n\t\t\t(let (k) args)\r\n\t\t\t(kvs-find1st kvs k)\r\n\t\t}\r\n\t}\r\n\t`兼容空列表的长度判断`\r\n\tlen {\r\n\t\t(let (cs) args)\r\n\t\t(if-run (exist? cs)\r\n\t\t\t{\r\n\t\t\t\t(length cs)\r\n\t\t\t}\r\n\t\t\t{0}\r\n\t\t)\r\n\t}\r\n\t`访问字典路径`\r\n\tkvs-path 'kvs-path\r\n\tkvs-path-run {\r\n\t\t(let (e paths ...ps) args)\r\n\t\t(apply (kvs-path e paths) ps)\r\n\t}\r\n\t`如果没有，设置默认值`\r\n\tdefault 'default\r\n\t`从某处开始切片`\r\n\tslice-from 'slice-from\r\n\tslice-to 'slice-to\r\n\t`暂不添加slice，因为不知道是(slice from to) 还是 (slice from length)`\r\n\r\n\treduce 'reduce\r\n\t`reduce-left就是reduce`\r\n\treduce-left 'reduce\r\n\treduce-right 'reduce-right\r\n\t`与列表的reduce对应`\r\n\tkvs-reduce 'kvs-reduce\r\n\tkvs-reduce-left 'kvs-reduce\r\n\tkvs-reduce-right 'kvs-reduce-right\r\n\t`类似js中的some，已经包含`\r\n\tsome {\r\n\t\t(let (xs run) args)\r\n\t\t(reduce xs {\r\n\t\t\t(let (init x) args)\r\n\t\t\t(or init (run x))\r\n\t\t} false)\r\n\t}\r\n\r\n\tforEach {\r\n\t\t(let (xs run) args)\r\n\t\t(reduce-right xs {\r\n\t\t\t(let (init x) args)\r\n\t\t\t(run x)\r\n\t\t} [])\r\n\t}\r\n\r\n\tmap {\r\n\t\t(let (xs run) args)\r\n\t\t(reduce-right xs {\r\n\t\t\t(let (init x) args)\r\n\t\t\t(extend (run x ) init)\r\n\t\t} [])\r\n\t}\r\n\r\n\tfilter {\r\n\t\t(let (xs run) args)\r\n\t\t(reduce-right xs {\r\n\t\t\t(let (init x) args)\r\n\t\t\t(let is (run x))\r\n\t\t\t(if-run is\r\n\t\t\t\t{(extend x init)}\r\n\t\t\t\t{init}\r\n\t\t\t)\r\n\t\t} [])\r\n\t}\r\n\r\n\tcombine-two 'combine-two\r\n\r\n\t`类似js-Array的splice:list,offset,count,...adds，先不考虑异常`\r\n\tsplice  {\r\n\t\t(let \r\n\t\t\t(xs i count ...adds) args\r\n\t\t\tindex (+ i count)\r\n\t\t)\r\n\t\t(if-run (< index (length xs))\r\n\t\t\t{\r\n\t\t\t\t(let olds  (offset xs (+ i count)))\r\n\t\t\t\t(let olds (combine-two adds olds))\r\n\t\t\t\t(combine-two (slice-to xs i) olds)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t(slice-to xs (- i 1))\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\t\r\n\t`其实是与splice-last对应`\r\n\tsplice-first {\r\n\t\t(let (xs count ...adds) args)\r\n\t\t(let olds (offset xs count))\r\n\t\t(combine-two adds olds)\r\n\t}\r\n\t`最后一个list,count,adds`\r\n\tsplice-last {\r\n\t\t(let (xs count ...adds) args)\r\n\t\t(let offset (- (length xs) count))\r\n\t\t(combine-two (slice-to xs offset) adds)\r\n\t}\r\n\r\n\tsort {\r\n\t\t`run flag v =0 <0 >0`\r\n\t\t(let (xs run) args sort this)\r\n\t\t(if-run (exist? xs)\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) xs)\r\n\t\t\t\t(if-run (empty? xs)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t`只有一个元素`\r\n\t\t\t\t\t\t(list x)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t`有别的元素`\r\n\t\t\t\t\t\t(let (smallers eqs largers ) \r\n\t\t\t\t\t\t\t\t(reduce xs\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let ((smallers eqs largers) v i) args)\r\n\t\t\t\t\t\t\t\t\t\t(let c (run x v))\r\n\t\t\t\t\t\t\t\t\t\t(if-run (= 0 c)\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t(list\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsmallers\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(extend v eqs)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlargers\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t(if-run (> 0 c)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(list\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsmallers\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqs\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(extend v largers)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`<`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(list\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(extend v smallers)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\teqs\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlargers\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t(list [] [] [])\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t(reverse \r\n\t\t\t\t\t\t\t(reverse-join \r\n\t\t\t\t\t\t\t\t(sort smallers run)\r\n\t\t\t\t\t\t\t\t(extend x eqs) \r\n\t\t\t\t\t\t\t\t(sort largers run)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tkvs-forEach {\r\n\t\t(let (kvs run) args)\r\n\t\t(kvs-reduce-right kvs {\r\n\t\t\t(let (init v k) args)\r\n\t\t\t(run v k)\r\n\t\t} [])\r\n\t}\r\n\r\n\tkvs-map {\r\n\t\t(let (kvs run) args)\r\n\t\t(kvs-reduce-right kvs \r\n\t\t\t{\r\n\t\t\t\t(let (init v k) args)\r\n\t\t\t\t(kvs-extend k (run v k) init)\r\n\t\t\t} \r\n\t\t\t[]\r\n\t\t)\r\n\t}\r\n\t`接受一组函数，如果一为假，不执行后续返回假；如果全为真，最后返回真`\r\n\tand_q {\r\n\t\t(let xs args and_q this)\r\n\t\t(if-run (exist? xs)\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) xs)\r\n\t\t\t\t(if-run (x)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(apply and_q xs)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{false}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{true}\r\n\t\t)\r\n\t}\r\n\t`接受一组函数，有一个为真，不执行后续返回真；如果全为假，返回假`\r\n\tor_q {\r\n\t\t(let xs args or_q this)\r\n\t\t(if-run (exist? xs)\r\n\t\t\t{\r\n\t\t\t\t(let (x ...xs) xs)\r\n\t\t\t\t(if-run (x)\r\n\t\t\t\t\t{true}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(apply or_q xs)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{false}\r\n\t\t)\r\n\t}\r\n\t`条件执行`\r\n\tif-run 'if-run\r\n\tswitch {\r\n\t\t(let (str kvs default-fun) args)\r\n\t\t(let o (kvs-find1st kvs str))\r\n\t\t(if (exist? o) o (default default-fun empty-fun))\r\n\t}\r\n\t`多条件if,switch`\r\n\tswitch-run {\r\n\t\t(let run (apply switch args))\r\n\t\t(run)\r\n\t}\r\n]",
  "index/S-Lisp/util/mve/build-children.lisp": "\r\n\r\n{\r\n\t`从util里调入`\r\n\t(let (Value Watcher DOM nokey) args)\r\n\t(let build {\r\n\t\t`下面调入`\r\n\t\t(let (repeat mve) args)\r\n\t\t{\r\n\t\t\t`最终调入`\r\n\t\t\t(let (row i) args)\r\n\t\t\t(let o [\r\n\t\t\t\t\tdata (Value row)\r\n\t\t\t\t\tindex (Value i)\r\n\t\t\t\t]\r\n\t\t\t)\r\n\t\t\t[\r\n\t\t\t\trow 'o\r\n\t\t\t\tobj (mve {\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\telement {\r\n\t\t\t\t\t\t\t(repeat o)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}\r\n\t})\r\n\t{\r\n\t\t(let \r\n\t\t\t(pel children inits destroys mve) args\r\n\t\t\t`c.array c.repeat`\r\n\t\t\tcd (kvs-match (children))\r\n\t\t\t`是否初始化`\r\n\t\t\tisInit (cache false)\r\n\t\t\t`未初始化时缓存值`\r\n\t\t\tc-inits (cache [])\r\n\t\t\t(bc-after bc-destroy) \r\n\t\t\t\t(nokey \r\n\t\t\t\t\t`build` \r\n\t\t\t\t\t(build (cd 'repeat) mve)\r\n\t\t\t\t\t`after` \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let voi \r\n\t\t\t\t\t\t\t(kvs-path (first args) [obj init])\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t(if-run (exist? voi)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t(if-run (isInit)\r\n\t\t\t\t\t\t\t\t\t{(voi)}\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(c-inits (extend voi (c-inits)))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t`appendChild` \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let el \r\n\t\t\t\t\t\t\t(kvs-path-run (first args)  \r\n\t\t\t\t\t\t\t\t[obj getElement]\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t(DOM 'appendChild pel  el)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t`removeChild` \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(DOM 'removeChild pel\r\n\t\t\t\t\t\t\t(kvs-path-run (first args)\r\n\t\t\t\t\t\t\t\t[obj getElement]\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t`Array的计算观察`\r\n\t\t\twatch \r\n\t\t\t\t(Watcher \r\n\t\t\t\t\t`before`\r\n\t\t\t\t\t[]\r\n\t\t\t\t\t`exp`\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t((cd 'array))\r\n\t\t\t\t\t}\r\n\t\t\t\t\t`after` \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(bc-after (first args))\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t)\r\n\t\t(list \r\n\t\t\t`inits`\r\n\t\t\t(extend \r\n\t\t\t\t{\r\n\t\t\t\t\t(forEach (c-inits)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t((first args))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t\t(c-inits [])\r\n\t\t\t\t\t(isInit true)\r\n\t\t\t\t} \r\n\t\t\t\tinits\r\n\t\t\t) \r\n\t\t\t`destroys`\r\n\t\t\t(extend \r\n\t\t\t\t{ \r\n\t\t\t\t\t(watch disable) \r\n\t\t\t\t\t(bc-destroy)\r\n\t\t\t\t} \r\n\t\t\t\tdestroys\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n}",
  "index/S-Lisp/util/mve/DOM.lisp": "\r\n(let kvs \r\n\t[\r\n\t\tcreateElement {\r\n\t\t\t(let (type NS) args)\r\n\t\t\t(if-run (exist? NS)\r\n\t\t\t\t{\r\n\t\t\t\t\t(js-call 'document 'createElement (list NS type))\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\t(js-call 'document 'createElement (list type))\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\tcreateTextNode {\r\n\t\t\t(js-call 'document 'createTextNode args)\r\n\t\t}\r\n\t\tappendChild {\r\n\t\t\t(let (el child) args)\r\n\t\t\t(js-call el 'appendChild (list child))\r\n\t\t}\r\n\t\treplaceWith {\r\n\t\t\t(let (old-e new-e) args)\r\n\t\t\t(let pn (js-attr old-e 'parentNode))\r\n\t\t\t(js-call pn 'replaceChild (list new-e old-e))\r\n\t\t}\r\n\t\tremoveChild {\r\n\t\t\t(let (el child) args)\r\n\t\t\t(js-call el 'removeChild (list child))\r\n\t\t}\r\n\t\tattr {\r\n\t\t\t(let (el key value) args)\r\n\t\t\t(if-run (exist? value)\r\n\t\t\t\t{\r\n\t\t\t\t\t(js-call el 'removeAttribute (list key))\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\t(js-call el 'setAttribute (list key value))\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\tstyle {\r\n\t\t\t(let (el key value) args)\r\n\t\t\t(js-attr (js-attr el 'style) key value)\r\n\t\t}\r\n\t\tprop {\r\n\t\t\t(let (el key value) args)\r\n\t\t\t(js-attr el key value)\r\n\t\t}\r\n\t\taction {\r\n\t\t\t(let (el key value) args)\r\n\t\t\t(js-call 'mb.DOM 'addEvent (list el key value))\r\n\t\t}\r\n\t\ttext {\r\n\t\t\t(let (el value) args)\r\n\t\t\t(js-attr el 'innerText value)\r\n\t\t}\r\n\t\tvalue {\r\n\t\t\t(let (el value) args)\r\n\t\t\t(js-attr el 'value value)\r\n\t\t}\r\n\t\thtml {\r\n\t\t\t(let (el value) args)\r\n\t\t\t(js-attr el 'innerHTML value)\r\n\t\t}\r\n\t]\r\n)\r\n{\r\n\t(let (key ...params) args)\r\n\t(apply (switch key kvs) params)\r\n}",
  "index/S-Lisp/util/mve/index.lisp": "{\r\n\t(let util (kvs-match (load './util.lisp))\r\n\t Parse (load './parse.lisp)\r\n\t DOM (load './DOM.lisp)\r\n\t build-children (load './build-children.lisp)\r\n\t nokey (load './nokey.lisp)\r\n\t)\r\n\t((util 'Exp) \r\n\t\t(Parse\r\n\t\t\tDOM\r\n\t\t\t(build-children\r\n\t\t\t\t(util 'Value)\r\n\t\t\t\t(util 'Watcher)\r\n\t\t\t\tDOM\r\n\t\t\t\tnokey\r\n\t\t\t)\r\n\t\t\t(util 'locsize)\r\n\t\t)\r\n\t)\r\n}",
  "index/S-Lisp/util/mve/nokey.lisp": "\r\n{\r\n\t`与js的array不同，使用倒置的顺序`\r\n\t(let (p-build p-after p-appendChild p-removeChild) args)\r\n\t(let \r\n\t\tcaches (cache [])\r\n\t\tviews (cache [])\r\n\t\tupdate-views {\r\n\t\t\t(let (array) args)\r\n\t\t\t({\r\n\t\t\t\t(let (vs as) args circle this)\r\n\t\t\t\t(if-run (exist? vs)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let (v ...vs) vs (a ...as) as)\r\n\t\t\t\t\t\t(kvs-path-run  v [row data] a)\r\n\t\t\t\t\t\t(circle vs as)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t} (views) array)\r\n\t\t}\r\n\t\tlen-c {\r\n\t\t\t(len \r\n\t\t\t\t((first args))\r\n\t\t\t)\r\n\t\t}\r\n\t)\r\n\t[\r\n\t\t`after` \r\n\t\t{\r\n\t\t\t(let (array) args)\r\n\t\t\t(if-run \r\n\t\t\t\t(< (len array)(len-c views) )\r\n\t\t\t\t{\r\n\t\t\t\t\t`多出的`\r\n\t\t\t\t\t(let more (slice-from (views) (len array)))\r\n\t\t\t\t\t`移除视图上的元素`\r\n\t\t\t\t\t(forEach more \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t(p-removeChild v)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t\t`更新视图上数据`\r\n\t\t\t\t\t(views (slice-to (views) (len array)))\r\n\t\t\t\t\t(update-views array)\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\t(if-run \r\n\t\t\t\t\t\t(< (len array) (len-c caches))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t`向caches上增加`\r\n\t\t\t\t\t\t\t(let new-view (slice-to (caches) (len array)))\r\n\t\t\t\t\t\t\t(let more (slice-from new-view (len-c views)))\r\n\t\t\t\t\t\t\t(forEach more\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t\t\t(p-appendChild v)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t(views new-view)\r\n\t\t\t\t\t\t\t(update-views array)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t`从caches向视图上增加`\r\n\t\t\t\t\t\t\t(let more (slice-from (caches) (len-c views)))\r\n\t\t\t\t\t\t\t(forEach more\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t\t\t(p-appendChild v)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t(views (caches))\r\n\t\t\t\t\t\t\t(update-views array)\r\n\t\t\t\t\t\t\t`新增加`\r\n\t\t\t\t\t\t\t(let \r\n\t\t\t\t\t\t\t\tc-l  (len-c caches)\r\n\t\t\t\t\t\t\t\tmore (slice-from array c-l)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t(let (more-k) (reduce more\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let \r\n\t\t\t\t\t\t\t\t\t\t\t((init i) a) args\r\n\t\t\t\t\t\t\t\t\t\t\ti (+ i c-l 1)\r\n\t\t\t\t\t\t\t\t\t\t\tv (p-build a i)\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t(p-appendChild v)\r\n\t\t\t\t\t\t\t\t\t\t(p-after v)\r\n\t\t\t\t\t\t\t\t\t\t`因为把新增加的追加到后面了`\r\n\t\t\t\t\t\t\t\t\t\t(list \r\n\t\t\t\t\t\t\t\t\t\t\t(extend v init)\r\n\t\t\t\t\t\t\t\t\t\t\ti\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t[[] 0]\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t(caches (combine-two (caches) (reverse more-k)))\r\n\t\t\t\t\t\t\t(views (caches))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\t`destroy`\r\n\t\t{\r\n\t\t\t(forEach (caches)\r\n\t\t\t\t{\r\n\t\t\t\t\t(let (c) args)\r\n\t\t\t\t\t(let destroy \r\n\t\t\t\t\t\t(kvs-path c [obj destroy])\r\n\t\t\t\t\t)\r\n\t\t\t\t\t(if-run (exist? destroy) destroy)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t]\r\n}",
  "index/S-Lisp/util/mve/parse.lisp": "\r\n(let \r\n\tbind {\r\n\t\t(let (watch value f) args)\r\n\t\t(if-run (function? value)\r\n\t\t\t\t{\r\n\t\t\t\t\t(watch \r\n\t\t\t\t\t\t`before`\r\n\t\t\t\t\t\t[]\r\n\t\t\t\t\t\t`exp`\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(value)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t`after`\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(f (first args))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\t(f value)\r\n\t\t\t\t}\r\n\t\t)\r\n\t} \r\n\tbindKV {\r\n\t\t(let (watch key value f) args)\r\n\t\t(bind watch value {\r\n\t\t\t\t(f key \r\n\t\t\t\t\t(first args)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t} \r\n\tbindMap {\r\n\t\t(let (watch map f) args)\r\n\t\t(if-run (exist? map)\r\n\t\t\t\t{\r\n\t\t\t\t\t(kvs-forEach map \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(let (v k) args)\r\n\t\t\t\t\t\t\t(bindKV watch k v f)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t)\r\n\t} \r\n\tbindEvent {\r\n\t\t(let (map f) args)\r\n\t\t(if-run (exist? map)\r\n\t\t\t\t{\r\n\t\t\t\t\t(kvs-forEach map \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(let (v k) args)\r\n\t\t\t\t\t\t\t(f k v)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t)\r\n\t} \r\n\tif-bind {\r\n\t\t(let (watch value f) args)\r\n\t\t(if-run \r\n\t\t\t(exist? value)\r\n\t\t\t{\r\n\t\t\t\t(bind watch value f)\r\n\t\t\t}\r\n\t\t)\r\n\t} \r\n\t`主要是inits和destroys，如果没有就不追加`\r\n\textendOr {\r\n\t\t(let (x xs) args)\r\n\t\t(if-run (exist? x)\r\n\t\t\t{\r\n\t\t\t\t(extend x xs)\r\n\t\t\t}\r\n\t\t\t{xs}\r\n\t\t)\r\n\t} \r\n\tbuild-locsize {\r\n\t\t(let (locsize json fun) args)\r\n\t\t(forEach locsize {\r\n\t\t\t(let \r\n\t\t\t\t(str) args\r\n\t\t\t\tvf (kvs-find1st json str)\r\n\t\t\t)\r\n\t\t\t(if-run (exist? vf)\r\n\t\t\t\t(fun str vf)\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\t`供后面inits和destroys使用`\r\n\tforEach-run {\r\n\t\t(let (array) args)\r\n\t\t{\r\n\t\t\t(forEach array\r\n\t\t\t\t{\r\n\t\t\t\t\t((first args))\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n)\r\n{\r\n\t(let (DOM build-children locsize) args)\r\n\t`对函数`\r\n\t(let Parse-fun \r\n\t\t{\r\n\t\t\t(let (fun watch inits destroys mve) args)\r\n\t\t\t(let change (cache []))\r\n\t\t\t(watch\r\n\t\t\t\t`before` \r\n\t\t\t\t[]\r\n\t\t\t\t`exp`\r\n\t\t\t\tfun \r\n\t\t\t\t`after` \r\n\t\t\t\t{\r\n\t\t\t\t\t(let (element) args)\r\n\t\t\t\t\t(let newObj \r\n\t\t\t\t\t\t(mve \r\n\t\t\t\t\t\t\t{ \r\n\t\t\t\t\t\t\t\t[ element 'element] \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t(let obj (change))\r\n\t\t\t\t\t(change newObj)\r\n\t\t\t\t\t(let newObj (kvs-match newObj))\r\n\t\t\t\t\t(if-run (exist? obj)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t`非第一次生成`\r\n\t\t\t\t\t\t\t(let obj (kvs-match obj))\r\n\t\t\t\t\t\t\t(DOM \r\n\t\t\t\t\t\t\t\t'replaceWith \r\n\t\t\t\t\t\t\t\t((obj 'getElement))\r\n\t\t\t\t\t\t\t\t((newObj 'getElement))\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t(if-run (exist? (obj 'destroy)) (obj 'destroy))\r\n\t\t\t\t\t\t\t(if-run (exist? (newObj 'init)) (newObj 'init))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t(list \r\n\t\t\t\tchange \r\n\t\t\t\t`绑定第一个生成`\r\n\t\t\t\t(extendOr (kvs-find1st (change) 'init) inits ) \r\n\t\t\t\t`销毁最后一个`\r\n\t\t\t\t(extend \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t((default \r\n\t\t\t\t\t\t\t(kvs-find1st (change) 'destroy)\r\n\t\t\t\t\t\t\tempty-fun\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t} \r\n\t\t\t\t\tdestroys\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t}\r\n\t)\r\n\t`对列表`\r\n\t(let Parse {\r\n\t\t\t(let (json watch k inits destroys mve) args Parse this)\r\n\t\t\t(let json (default json \"\"))\r\n\t\t\t(if-run (list? json)\r\n\t\t\t\t{\r\n\t\t\t\t\t`列表情况，对应js中字典`\r\n\t\t\t\t\t(let j (kvs-match json))\r\n\t\t\t\t\t(if-run (function? (j 'type))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t`自定义组件`\r\n\t\t\t\t\t\t\t\t(let obj \r\n\t\t\t\t\t\t\t\t\t(kvs-match \r\n\t\t\t\t\t\t\t\t\t\t((j 'type) (j 'params))\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`绑定id`\r\n\t\t\t\t\t\t\t\t(if-run (exist? (j 'id))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(k (kvs-extend (j 'id) obj (k)))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t(let e ( (obj 'getElement ) ))\r\n\t\t\t\t\t\t\t\t`绑定locsize`\r\n\t\t\t\t\t\t\t\t(build-locsize locsize json {\r\n\t\t\t\t\t\t\t\t\t(let (str vf) args\r\n\t\t\t\t\t\t\t\t\t\t ef (default (obj str) empty-fun)\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t(bind watch vf {\r\n\t\t\t\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t\t\t\t(ef v)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'style e str (str-join ['v px]))\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t(list \r\n\t\t\t\t\t\t\t\t\te\r\n\t\t\t\t\t\t\t\t\t(extendOr (obj 'init) inits)\r\n\t\t\t\t\t\t\t\t\t(extendOr (obj 'destroy) destroys)\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t`原生组件`\r\n\t\t\t\t\t\t\t\t(let e \r\n\t\t\t\t\t\t\t\t\t(DOM \r\n\t\t\t\t\t\t\t\t\t\t'createElement \r\n\t\t\t\t\t\t\t\t\t\t(j 'type)\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`绑定id`\r\n\t\t\t\t\t\t\t\t(if-run (exist? (j 'id))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(k (kvs-extend (j 'id) e (k)))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`attr属性`\r\n\t\t\t\t\t\t\t\t(bindMap watch (j 'attr) \r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let (k v) args)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'attr e k v)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`style属性`\r\n\t\t\t\t\t\t\t\t(bindMap watch (j 'style)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let (k v) args)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'style e k v)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`动作`\r\n\t\t\t\t\t\t\t\t(bindEvent (j 'action)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let (k v) args)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'action e k v)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`内部字符`\r\n\t\t\t\t\t\t\t\t(if-bind watch (j 'text) \r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'text e v)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`内部值`\r\n\t\t\t\t\t\t\t\t(if-bind watch (j 'value)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'value e v)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`innerHTML`\r\n\t\t\t\t\t\t\t\t(if-bind watch (j 'html)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'html e v)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`children`\r\n\t\t\t\t\t\t\t\t(let (inits destroys) \r\n\t\t\t\t\t\t\t\t\t(if-run (function? (j 'children))\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t`children是函数，即repeat`\r\n\t\t\t\t\t\t\t\t\t\t\t(build-children e (j 'children) inits destroys mve)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t`children是列表`\r\n\t\t\t\t\t\t\t\t\t\t\t(reduce (j 'children)\r\n\t\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(let (ini child) args)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(let (inits destroys) ini)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(let (ce inits destroys) (Parse child watch k inits destroys mve))\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(DOM 'appendChild e ce)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t(list inits destroys)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t(list inits destroys)\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t`绑定locsize`\r\n\t\t\t\t\t\t\t\t(build-locsize locsize json {\r\n\t\t\t\t\t\t\t\t\t(let (str vf) args)\r\n\t\t\t\t\t\t\t\t\t(bind watch vf {\r\n\t\t\t\t\t\t\t\t\t\t(let (v) args)\r\n\t\t\t\t\t\t\t\t\t\t(DOM 'style e str (str-join ['v px]))\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t(list e inits destroys)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\t(if-run (function? json)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t`函数节点`\r\n\t\t\t\t\t\t\t(let (change inits destroys) (Parse-fun json watch inits destroys mve))\r\n\t\t\t\t\t\t\t(list \r\n\t\t\t\t\t\t\t\t((kvs-find1st (change) 'getElement))\r\n\t\t\t\t\t\t\t\tinits\r\n\t\t\t\t\t\t\t\tdestroys\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t`值节点`\r\n\t\t\t\t\t\t\t(list \r\n\t\t\t\t\t\t\t\t(DOM 'createTextNode json)\r\n\t\t\t\t\t\t\t\tinits\r\n\t\t\t\t\t\t\t\tdestroys\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t)\r\n\t{\r\n\t\t(let \r\n\t\t\t(json watch k mve) args\r\n\t\t\tinits (cache []) \r\n\t\t\tdestroys (cache [])\r\n\t\t)\r\n\t\t(if-run (function? json)\r\n\t\t\t{\r\n\t\t\t\t`function`\r\n\t\t\t\t(let (change inits destroys) (Parse-fun json watch [] [] mve))\r\n\t\t\t\t(list\r\n\t\t\t\t\t{((kvs-find1st (change) 'getElement))}\r\n\t\t\t\t\t(forEach-run inits)\r\n\t\t\t\t\t(forEach-run destroys)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t(let (el inits destroys) \r\n\t\t\t\t\t(Parse json watch k [] [] mve)\r\n\t\t\t\t)\r\n\t\t\t\t(list\r\n\t\t\t\t\t{el}\r\n\t\t\t\t\t(forEach-run inits)\r\n\t\t\t\t\t(forEach-run destroys)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}",
  "index/S-Lisp/util/mve/util.lisp": "\r\n\r\n\r\n(let Dep-target (cache []))\r\n\r\n(let Dep ({\r\n\t\t(let uid (cache 0))\r\n\t\t{\r\n\t\t\t(let subs  (cache []))\r\n\t\t\t`subs中已经包含`\r\n\t\t\t(let contain {\r\n\t\t\t\t(let (target-id) (first args))\r\n\t\t\t\t(some (subs) \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let (id) (first args))\r\n\t\t\t\t\t\t(= id target-id)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t})\r\n\t\t\t(uid (+ uid 1))\r\n    \t\t[\r\n    \t\t\t`depend`\r\n    \t\t\t{\r\n    \t\t\t\t(if-run (exist? (Dep-target))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t \t(if-run (contain (Dep-target))\r\n\t\t\t\t\t\t \t\t{\r\n\t\t\t\t\t\t \t\t\t(log '已经包含了)\r\n\t\t\t\t\t\t \t\t}\r\n\t\t\t\t\t\t \t\t{\r\n\t\t\t\t\t\t \t\t\t(subs \r\n\t\t\t\t\t\t \t\t\t\t(extend \r\n\t\t\t\t\t\t \t\t\t\t\t(Dep-target) \r\n\t\t\t\t\t\t \t\t\t\t\t(subs)\r\n\t\t\t\t\t\t \t\t\t\t)\r\n\t\t\t\t\t\t \t\t\t)\r\n\t\t\t\t\t\t \t\t}\r\n\t\t\t\t\t\t \t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n    \t\t\t}\r\n    \t\t\t`notify` \r\n    \t\t\t{\r\n    \t\t\t\t(let old_subs (subs))\r\n    \t\t\t\t(subs [])\r\n    \t\t\t\t(forEach old_subs \r\n    \t\t\t\t\t{\r\n    \t\t\t\t\t\t(let (id update) (first args))\r\n    \t\t\t\t\t\t(update)\r\n    \t\t\t\t\t}\r\n    \t\t\t\t)\r\n    \t\t\t}\r\n    \t\t\t`id`\r\n    \t\t\t(uid)\r\n    \t\t]\r\n\t\t}\r\n\t})\r\n\t`值节点`\r\n\tValue {\r\n\t\t(let (dep-depend dep-notify dep-id) (Dep))\r\n\t\t(let v (apply cache args))\r\n\t\t{\r\n\t\t\t(let xs args)\r\n\t\t\t(if-run (exist? xs)\r\n\t\t\t\t{\r\n\t\t\t\t\t(if-run (exist? (Dep-target))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(log '计算期间不允许修改)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(v (first xs))\r\n\t\t\t\t\t\t\t(dep-notify)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\t(dep-depend)\r\n\t\t\t\t\t(v)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\tWatcher ({\r\n\t\t(let uid (cache 0))\r\n\t\t{\r\n\t\t\t(let (p-before p-exp p-after) args)\r\n\t\t\t(let  \r\n\t\t\t\tbefore  (default p-before empty-fun) \r\n\t\t\t\tafter (default p-after empty-fun)\r\n\t\t\t)\r\n\r\n\t\t\t(let enable (cache true))\r\n\t\t\t(uid (+ (uid) 1))\r\n\t\t\t(let id (uid))\r\n\t\t\t(let update \r\n\t\t\t\t{\r\n\t\t\t\t\t(let update this)\r\n\t\t\t\t\t(if-run (enable)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(let bo (before))\r\n\t\t\t\t\t\t\t(Dep-target ['id 'update])\r\n\t\t\t\t\t\t\t(let ao (p-exp bo))\r\n\t\t\t\t\t\t\t(Dep-target [])\r\n\t\t\t\t\t\t\t(after ao)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t(update)\r\n\t\t\t[\r\n\t\t\t\tid 'id\r\n\t\t\t\tupdate 'update\r\n\t\t\t\tdisable {\r\n\t\t\t\t\t(enable false)\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t})\r\n\r\n\tCache {\r\n\t\t(let (dep-depend dep-notify dep-id) (Dep))\r\n\t\t(let (watch func) args)\r\n\t\t(let cache (cache []))\r\n\t\t(watch [\r\n\t\t\texp {\r\n\t\t\t\t(cache (func ))\r\n\t\t\t\t(dep-notify)\r\n\t\t\t}\r\n\t\t])\r\n\t\t{\r\n\t\t\t(dep-depend)\r\n\t\t\t(cache)\r\n\t\t}\r\n\t}\r\n\tlocsize [\r\n\t\twidth height left top right bottom\r\n\t]\r\n)\r\n\r\n[\r\n\tValue (quote Value)\r\n\r\n\tWatcher (quote Watcher)\r\n\r\n\tCache (quote Cache)\r\n\r\n\tlocsize (quote locsize)\r\n\r\n\tExp {\r\n\t\t(let (Parse) args)\r\n\t\t(let ret {\r\n\t\t\t(let (user-func) args mve this)\r\n\t\t\t(let watchPool (cache []))\r\n\t\t\t(let Watch \r\n\t\t\t\t{\r\n\t\t\t\t\t(let kvf (kvs-match args))\r\n\t\t\t\t\t(let w \r\n\t\t\t\t\t\t(Watcher \r\n\t\t\t\t\t\t\t(kvf 'before)\r\n\t\t\t\t\t\t\t(kvf 'exp)\r\n\t\t\t\t\t\t\t(kvf 'after)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t(watchPool \r\n\t\t\t\t\t\t(extend w \r\n\t\t\t\t\t\t\t(watchPool)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\tw\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t(let Cache \r\n\t\t\t\t{\r\n\t\t\t\t\t(Cache Watch (first args))\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t(let k (cache []))\r\n\t\t\t`用户函数返回`\r\n\t\t\t(let user-result \r\n\t\t\t\t(user-func \r\n\t\t\t\t\t({\r\n\t\t\t\t\t\t(let kvs \r\n\t\t\t\t\t\t\t(list \r\n\t\t\t\t\t\t\t\t'k {\r\n\t\t\t\t\t\t\t\t\t(let (str) args)\r\n\t\t\t\t\t\t\t\t\t(kvs-find1st (k) str)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t'Value Value\r\n\t\t\t\t\t\t\t\t'Watch Watch\r\n\t\t\t\t\t\t\t\t'Cache Cache\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(let (key ...params) args)\r\n\t\t\t\t\t\t\t(apply (kvs-find1st kvs key) params)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t`locsize部分`\r\n\t\t\t(let me  \r\n\t\t\t\t(reduce locsize \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let (init str) args)\r\n\t\t\t\t\t\t(let fun (kvs-find1st user-result str))\r\n\t\t\t\t\t\t(kvs-extend \r\n\t\t\t\t\t\t\tstr \r\n\t\t\t\t\t\t\t(if-run (exist? fun)\r\n\t\t\t\t\t\t\t\t{fun}\r\n\t\t\t\t\t\t\t\t{(Value 0)}\r\n\t\t\t\t\t\t\t) \r\n\t\t\t\t\t\t\tinit\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t(let user-result (kvs-match user-result))\r\n\t\t\t(let me\r\n\t\t\t\t(kvs-reduce (user-result 'out)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let (init v k) args)\r\n\t\t\t\t\t\t(kvs-extend v k init)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tme\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t(let \r\n\t\t\t\t(getElement element-init element-destroy) \r\n\t\t\t\t(Parse \r\n\t\t\t\t\t(user-result 'element)\r\n\t\t\t\t\t`Watch 给内部使用的`\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let w  (apply Watcher args))\r\n\t\t\t\t\t\t(watchPool \r\n\t\t\t\t\t\t\t(extend w \r\n\t\t\t\t\t\t\t\t(watchPool)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\tw\r\n\t\t\t\t\t}\r\n\t\t\t\t\tk\r\n\t\t\t\t\tmve\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t\t(let \r\n\t\t\t\tuser-init (default (user-result 'init) empty-fun)\r\n\t\t\t\tuser-destroy (default (user-result 'destroy) empty-fun)\r\n\t\t\t)\r\n\t\t\t(kvs-reduce \r\n\t\t\t\t[\r\n\t\t\t\t\tgetElement (quote getElement)\r\n\t\t\t\t\tinit {\r\n\t\t\t\t\t\t(element-init)\r\n\t\t\t\t\t\t(user-init)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdestroy {\r\n\t\t\t\t\t\t(user-destroy)\r\n\t\t\t\t\t\t(element-destroy)\r\n\t\t\t\t\t\t(forEach (watchPool) \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t(let disable (kvs-find1st (first args) 'disable))\r\n\t\t\t\t\t\t\t\t(disable)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t\t{\r\n\t\t\t\t\t(let (init v k) args)\r\n\t\t\t\t\t(kvs-extend k v init)\r\n\t\t\t\t}\r\n\t\t\t\tme\r\n\t\t\t)\r\n\t\t})\r\n\t\tret\r\n\t}\r\n]\r\n",
  "index/S-Lisp/util/require.lisp": "\r\n\r\n\r\n\r\n\r\n\r\n\r\najax-text\r\nparse\r\ncaches\r\n(let \r\n\tcaches (cache [])\r\n\tsingle-load {\r\n\t\t(let (url notice baseUrl) args)\r\n\t\t(let value (kvs-find1st (caches) url))\r\n\t\t(if-run (exist? value)\r\n\t\t\t{\r\n\t\t\t\t(notice value)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t(ajax-text url \r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t(let (txt) args)\r\n\t\t\t\t\t\t(let lib (cache []))\r\n\t\t\t\t\t\t(let scope \r\n\t\t\t\t\t\t\t(kvs-extend \"lib\" \r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t(let (k) args)\r\n\t\t\t\t\t\t\t\t\t(kvs-find1st cache k)\r\n\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t\tscope\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t(let init (parse txt scope))\r\n\t\t\t\t\t\t(init lib url notice baseUrl)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n)\r\n{\r\n\t(let \r\n\t\txp (kvs-match (first args))\r\n\t\txp_data (xp 'data) \r\n\t\txp_success (xp 'success)\r\n\t\txp_delay (default (xp 'delay) false)\r\n\t\trequire this\r\n\t)\r\n\r\n\t(async-kvs-reduce\r\n\t\t`success`\r\n\t\t{\r\n\t\t\t(let (init) args)\r\n\t\t}\r\n\t\t`list`\r\n\t\txp_data\r\n\t\t`run`\r\n\t\t{\r\n\t\t\t(let (notice init v k i) args)\r\n\t\t}\r\n\t\t`init`\r\n\t\t[]\r\n\t)\r\n\t(let reduce-load \r\n\t\t{\r\n\t\t\t(let \r\n\t\t\t\t((key value ...libs) notice) args\r\n\t\t\t\treduce-load this\r\n\t\t\t)\r\n\t\t\t(let lib (kvs-find1st (caches) key))\r\n\t\t\t(if-run (exist? lib)\r\n\t\t\t\t{\r\n\t\t\t\t\t(reduce-load libs)\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t(ajax-text \r\n\t\t\t\tkey\r\n\t\t\t\t{\r\n\t\t\t\t\t(let (txt) args)\r\n\t\t\t\t\t(let xp (parse txt))\r\n\t\t\t\t\t(let xp-data (kvs-find1st xp 'data))\r\n\t\t\t\t\t(let caches (kvs-extend key xp caches))\r\n\t\t\t\t\t(if-run (exist? xp-data)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t(reduce-load xp-data caches)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcaches\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t)\r\n\t(if-run (exist? xp_data)\r\n\t\t{\r\n\t\t\t(reduce-load \r\n\t\t\t\txp_data \r\n\t\t\t\t{\r\n\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t)\r\n}"
}